import axios from 'axios';
import * as fs from 'fs';

interface LanguageInfo {
  display: string;
  slug: string;
}

interface CodeSnippet {
  lang: string;
  langSlug: string;
  code: string;
}

interface Question {
  title: string;
  content: string;
  codeSnippets: CodeSnippet[];
}

interface DailyProblem {
  date: string;
  link: string;
  question: Question;
}

interface GraphQLResponse {
  data: {
    activeDailyCodingChallengeQuestion: DailyProblem;
  };
}

async function fetchLeetCodeProblem(): Promise<void> {
  try {
    // Get language from environment variable or default to rust
    const selectedLanguage = (process.env.LANGUAGE || 'rust').toLowerCase();
    
    // Language mapping for display and code selection
    const languageMap: Record<string, LanguageInfo> = {
      'rust': { display: 'Rust', slug: 'rust' },
      'python': { display: 'Python', slug: 'python3' },
      'java': { display: 'Java', slug: 'java' },
      'cpp': { display: 'C++', slug: 'cpp' },
      'javascript': { display: 'JavaScript', slug: 'javascript' },
      'typescript': { display: 'TypeScript', slug: 'typescript' },
      'go': { display: 'Go', slug: 'golang' },
      'swift': { display: 'Swift', slug: 'swift' },
      'kotlin': { display: 'Kotlin', slug: 'kotlin' },
      'csharp': { display: 'C#', slug: 'csharp' }
    };
    
    const langInfo = languageMap[selectedLanguage] || languageMap['rust'];
    
    // Fetch the daily LeetCode problem
    const response = await axios.post<GraphQLResponse>('https://leetcode.com/graphql', {
      query: `query questionOfToday { 
        activeDailyCodingChallengeQuestion { 
          date 
          link 
          question { 
            title 
            content 
            codeSnippets { 
              lang 
              langSlug 
              code 
            } 
          } 
        } 
      }`
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Referer': 'https://leetcode.com/problemset/all/',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    const data = response.data;
    
    if (!data?.data?.activeDailyCodingChallengeQuestion) {
      console.log('No daily problem found');
      process.exit(1);
    }
    
    const problem = data.data.activeDailyCodingChallengeQuestion;

    // Extract problem details
    const title = problem.question.title;
    let content = problem.question.content;
    
    // Enhanced HTML content cleaning with better mathematical notation support
    // First, preserve important mathematical structures
    content = content.replace(/<sub>([^<]*)<\/sub>/g, '‚Çç$1‚Çé'); // Temporary subscript preservation
    content = content.replace(/<sup>([^<]*)<\/sup>/g, '‚ÅΩ$1‚Åæ'); // Temporary superscript preservation
    
    // Handle images - convert to Markdown format
    content = content.replace(/<img[^>]*src=["']([^"']*)["'][^>]*alt=["']([^"']*)["'][^>]*>/gi, '![$2]($1)');
    content = content.replace(/<img[^>]*alt=["']([^"']*)["'][^>]*src=["']([^"']*)["'][^>]*>/gi, '![$1]($2)');
    content = content.replace(/<img[^>]*src=["']([^"']*)["'][^>]*>/gi, '![]($1)'); // Images without alt text
    
    // Handle block-level tags that should create line breaks
    content = content.replace(/<\/?(p|div|br|li|ul|ol|h[1-6])[^>]*>/g, '\n');
    
    // Handle lists properly
    content = content.replace(/<li[^>]*>/g, '‚Ä¢ '); // Convert list items to bullet points
    content = content.replace(/<\/li>/g, '\n');
    
    // Handle inline tags that shouldn't break words but may contain formatting
    content = content.replace(/<\/?(?:strong|b)([^>]*)>/g, '**'); // Bold to markdown
    content = content.replace(/<\/?(?:em|i)([^>]*)>/g, '*'); // Italic to markdown
    content = content.replace(/<\/?code([^>]*)>/g, '`'); // Code to markdown
    
    // Remove remaining HTML tags
    content = content.replace(/<[^>]*>/g, ' ');
    
    // Clean HTML entities
    content = content.replace(/&nbsp;/g, ' ');   // Non-breaking spaces
    content = content.replace(/&lt;/g, '<');     // Less than
    content = content.replace(/&gt;/g, '>');     // Greater than
    content = content.replace(/&amp;/g, '&');    // Ampersand
    content = content.replace(/&quot;/g, '"');   // Quotes
    content = content.replace(/&#39;/g, "'");    // Apostrophes
    content = content.replace(/&hellip;/g, '...'); // Ellipsis
    content = content.replace(/&mdash;/g, '‚Äî');   // Em dash
    content = content.replace(/&ndash;/g, '‚Äì');   // En dash
    
    // Enhanced mathematical notation support
    // Convert preserved subscripts and superscripts to Unicode
    content = content.replace(/‚Çç([^‚Çé]*)‚Çé/g, (match, p1) => {
      // Convert common subscript characters
      return p1.replace(/0/g, '‚ÇÄ').replace(/1/g, '‚ÇÅ').replace(/2/g, '‚ÇÇ')
               .replace(/3/g, '‚ÇÉ').replace(/4/g, '‚ÇÑ').replace(/5/g, '‚ÇÖ')
               .replace(/6/g, '‚ÇÜ').replace(/7/g, '‚Çá').replace(/8/g, '‚Çà')
               .replace(/9/g, '‚Çâ').replace(/\+/g, '‚Çä').replace(/-/g, '‚Çã')
               .replace(/=/g, '‚Çå').replace(/\(/g, '‚Çç').replace(/\)/g, '‚Çé')
               .replace(/a/g, '‚Çê').replace(/e/g, '‚Çë').replace(/h/g, '‚Çï')
               .replace(/i/g, '·µ¢').replace(/j/g, '‚±º').replace(/k/g, '‚Çñ')
               .replace(/l/g, '‚Çó').replace(/m/g, '‚Çò').replace(/n/g, '‚Çô')
               .replace(/o/g, '‚Çí').replace(/p/g, '‚Çö').replace(/r/g, '·µ£')
               .replace(/s/g, '‚Çõ').replace(/t/g, '‚Çú').replace(/u/g, '·µ§')
               .replace(/v/g, '·µ•').replace(/x/g, '‚Çì');
    });
    
    content = content.replace(/‚ÅΩ([^‚Åæ]*)‚Åæ/g, (match, p1) => {
      // Convert common superscript characters
      return p1.replace(/0/g, '‚Å∞').replace(/1/g, '¬π').replace(/2/g, '¬≤')
               .replace(/3/g, '¬≥').replace(/4/g, '‚Å¥').replace(/5/g, '‚Åµ')
               .replace(/6/g, '‚Å∂').replace(/7/g, '‚Å∑').replace(/8/g, '‚Å∏')
               .replace(/9/g, '‚Åπ').replace(/\+/g, '‚Å∫').replace(/-/g, '‚Åª')
               .replace(/=/g, '‚Åº').replace(/\(/g, '‚ÅΩ').replace(/\)/g, '‚Åæ')
               .replace(/n/g, '‚Åø').replace(/i/g, '‚Å±').replace(/th/g, '·µó ∞');
    });
    
    // Handle common mathematical expressions
    content = content.replace(/(\d+)\s*\*\s*10\s*\^?\s*(\d+)/g, '$1 √ó 10^$2'); // Scientific notation
    content = content.replace(/(\d+)\s*\^\s*(\d+)/g, '$1^$2'); // General exponents
    content = content.replace(/10(\d+)/g, (match, p1) => {
      // Only convert if it looks like scientific notation (10^4, not things like 100)
      if (p1.length === 1 || (p1.length === 2 && parseInt(p1) > 10)) {
        return `10^${p1}`;
      }
      return match;
    });
    content = content.replace(/2\^(\d+)/g, '2^$1'); // Powers of 2
    content = content.replace(/O\(([^)]+)\)/g, 'O($1)'); // Big O notation
    content = content.replace(/log\s*(\d+)/g, 'log‚ÇÇ'); // Logarithms
    content = content.replace(/\blog\b/g, 'log'); // General log
    
    // Handle fractions and mathematical symbols
    content = content.replace(/<=>/g, '‚ü∫'); // If and only if
    content = content.replace(/<=/g, '‚â§');  // Less than or equal
    content = content.replace(/>=/g, '‚â•');  // Greater than or equal
    content = content.replace(/!=/g, '‚â†');  // Not equal
    content = content.replace(/\+-/g, '¬±'); // Plus minus
    content = content.replace(/sqrt/g, '‚àö'); // Square root
    content = content.replace(/infinity/g, '‚àû'); // Infinity
    content = content.replace(/sum/g, '‚àë');  // Summation
    content = content.replace(/product/g, '‚àè'); // Product
    content = content.replace(/delta/g, 'Œî'); // Delta
    content = content.replace(/theta/g, 'Œ∏'); // Theta
    content = content.replace(/pi/g, 'œÄ');   // Pi
    content = content.replace(/alpha/g, 'Œ±'); // Alpha
    content = content.replace(/beta/g, 'Œ≤');  // Beta
    content = content.replace(/gamma/g, 'Œ≥'); // Gamma
    
    // Clean up whitespace while preserving meaningful line breaks
    content = content.replace(/[ \t]+/g, ' ');  // Replace multiple spaces/tabs with single space
    content = content.replace(/\n[ \t]*\n/g, '\n\n');  // Normalize double line breaks
    content = content.replace(/\n{3,}/g, '\n\n');  // Limit to max double line breaks
    content = content.trim();  // Remove leading/trailing whitespace
    
    const link = `https://leetcode.com${problem.link}`;

    // Find code snippet for selected language or fallback to the first available
    const codeSnippets = problem.question.codeSnippets;
    const selectedCode = codeSnippets.find(snippet => snippet.langSlug === langInfo.slug)?.code || 
                        (codeSnippets.length > 0 ? codeSnippets[0].code : `// No ${langInfo.display} code available`);
    
    // Get current date for README
    const date = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });

    // Update README.md with beautiful markdown formatting
    const readmeContent = `# üéØ Daily LeetCode Problem

> **Updated:** ${date} | **Language:** ${langInfo.display}

---

## üìã Today's Challenge: **${title}**

<div align="center">

### üß© Problem Description

</div>

${content}

---

## üíª Starting Code (${langInfo.display})

\`\`\`${langInfo.slug.replace('python3', 'python').replace('golang', 'go')}
${selectedCode}
\`\`\`

---

<div align="center">

## üîó Quick Actions

[![Solve on LeetCode](https://img.shields.io/badge/Solve_on-LeetCode-orange?style=for-the-badge&logo=leetcode&logoColor=white)](${link})

</div>

---

## ‚öôÔ∏è How This Works

- ü§ñ **Automated Updates**: GitHub Actions fetches the daily problem at midnight UTC
- üé® **Clean Formatting**: Beautiful markdown styling with GitHub's design system
- üíª **Multi-Language Support**: Choose your preferred programming language
- üîÑ **Always Fresh**: New problem every day automatically

## üõ†Ô∏è Supported Languages

<div align="center">

| Language | Status | Language | Status |
|----------|--------|----------|--------|
| ü¶Ä Rust | ‚úÖ Default | üêç Python | ‚úÖ |
| ‚òï Java | ‚úÖ | ‚ö° C++ | ‚úÖ |
| üü® JavaScript | ‚úÖ | üî∑ TypeScript | ‚úÖ |
| üêπ Go | ‚úÖ | üçé Swift | ‚úÖ |
| üéØ Kotlin | ‚úÖ | üíé C# | ‚úÖ |

</div>

---

<div align="center">

### üåü Happy Coding! üåü

**Come back tomorrow for a new challenge!**

</div>`;

    fs.writeFileSync('README.md', readmeContent);
    
    console.log(`Successfully updated README.md with problem: ${title}`);

  } catch (error) {
    console.error(`Error fetching LeetCode problem:`, error);
    process.exit(1);
  }
}

// Run the function
fetchLeetCodeProblem();